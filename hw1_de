--written by https://t.me/weightlifter_a

--task 1
with sum_of_each_category_name_in_order as (select 
	distinct 
	c.name,
	oi.order_id,
	sum(price) over(partition by c.name, oi.order_id) as cost
from orders o 
join order_items oi 
	on o.id = oi.order_id
left join products p 
	on oi.product_id = p.id 
left join categories c 
	on p.category_id = c.id
where created_at between '2023-03-01' and '2023-03-31'
)
select 
	name as category_name,
	round(avg(cost),2) as avg_order_amount
from sum_of_each_category_name_in_order
group by name

--task 2
with users_costs as(
select 
	distinct 
	u.name as user_name,
	round(sum(p.amount) over(partition by u.name),2) as total_spent
from orders o 
left join payments p 
	on o.id = p.order_id 
left join users u 
	on o.user_id = u.id 
where o.status = 'Оплачен'
)
select 
	user_name,
	total_spent,
	dense_rank() over (order by total_spent desc) as user_rank
from users_costs
limit 3

--task 3
select
	to_char(o.created_at, 'YYYY-MM') as month,
	count(o.id) as total_orders,
	round(sum(p.amount),2) as total_payments 
from orders o 
left join payments p 
	on o.id = p.order_id 
group by to_char(o.created_at, 'YYYY-MM')
order by to_char(o.created_at, 'YYYY-MM')

--task 4
with products_sold as(
select 
	p.name as product_name,
	sum(oi.quantity) as total_sold
from order_items oi 
left join products p 
	on oi.product_id = p.id 
group by p.name
)
select 
	product_name,
	total_sold,
	round(total_sold * 100.0 / sum(total_sold) over(),2) as sales_percantage
from products_sold
order by sales_percantage desc
limit 5
	

--task 5
with users_costs as (
select
	distinct
	u.name as user_name,
	sum(p.amount) over (partition by u.name) as total_spent
from payments p 
left join orders o
	on p.order_id = o.id
left join users u 
	on o.user_id = u.id 
where o.status = 'Оплачен'
)
select 
	distinct
	user_name,
	total_spent
from users_costs
where total_spent > (select avg(total_spent) from users_costs)

--task 6
with products_sold as (
select
	c.name as category_name,
	p.name as product_name,
	sum(oi.quantity) as total_sold
from products p 
right join order_items oi
	on oi.product_id = p.id
join categories c 
	on p.category_id = c.id
group by c.name, p.name
order by c.name
),
products_rating as(
select 
	category_name,
	product_name,
	total_sold,
	row_number () over (partition by category_name order by total_sold desc) as rating
from products_sold 
order by category_name
)
select 
	category_name,
	product_name,
	total_sold
from products_rating
where rating <=3

--task 7
with category_revenue as(
select
	to_char(o.created_at, 'YYYY-MM') as month,
	c.name as category_name,
	sum(oi.quantity*p.price) over(partition by to_char(o.created_at, 'YYYY-MM'), c.name) as total_revenue
from order_items oi 
left join products p 
	on oi.product_id = p.id
left join categories c 
	on p.category_id = c.id
left join orders o 
	on oi.order_id = o.id
order by month, category_name
),
max_revenues as(
select 
	distinct
	month,
	category_name,
	total_revenue,
	max(total_revenue) over(partition by month) as max_revenue
from category_revenue
order by month
)
select 
	month,
	category_name,
	total_revenue
from max_revenues
where total_revenue = max_revenue

--task 8
with monthly_revenue as (
select 
	to_char(payment_date, 'YYYY-MM') as month,
	sum(amount) as monthly_payments
from payments p 
where to_char(payment_date, 'YYYY-MM') is not NULL
group by to_char(payment_date, 'YYYY-MM')
)
select 
	month,
	monthly_payments,
	sum(monthly_payments) over (order by month rows between unbounded preceding and current row) as cumulative_payments
from monthly_revenue




